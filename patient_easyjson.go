// Code generated by easyjson for marshaling/unmarshaling. EDITED TO REMOVE:
// MarshalJSON()
// UnmarshalJSON()

package main

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson65fe1869DecodeTmp(in *jlexer.Lexer, out *X) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "extension":
			if in.IsNull() {
				in.Skip()
				out.Extension = nil
			} else {
				in.Delim('[')
				if out.Extension == nil {
					if !in.IsDelim(']') {
						out.Extension = make([]Extension, 0, 2)
					} else {
						out.Extension = []Extension{}
					}
				} else {
					out.Extension = (out.Extension)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Extension
					(v1).UnmarshalEasyJSON(in)
					out.Extension = append(out.Extension, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp(out *jwriter.Writer, in X) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix[1:])
		if in.Extension == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Extension {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v X) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *X) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp(l, v)
}
func easyjson65fe1869DecodeTmp1(in *jlexer.Lexer, out *Text) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "div":
			out.Div = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp1(out *jwriter.Writer, in Text) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"div\":"
		out.RawString(prefix)
		out.String(string(in.Div))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Text) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Text) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp1(l, v)
}
func easyjson65fe1869DecodeTmp2(in *jlexer.Lexer, out *Telecom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "use":
			out.Use = string(in.String())
		case "system":
			out.System = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "rank":
			out.Rank = int(in.Int())
		case "period":
			(out.Period).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp2(out *jwriter.Writer, in Telecom) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"use\":"
		out.RawString(prefix[1:])
		out.String(string(in.Use))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		out.Int(int(in.Rank))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		(in.Period).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Telecom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Telecom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp2(l, v)
}
func easyjson65fe1869DecodeTmp3(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "system":
			out.System = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp3(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix[1:])
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp3(l, v)
}
func easyjson65fe1869DecodeTmp4(in *jlexer.Lexer, out *Ref) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reference":
			out.Reference = string(in.String())
		case "display":
			out.Display = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp4(out *jwriter.Writer, in Ref) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reference\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reference))
	}
	{
		const prefix string = ",\"display\":"
		out.RawString(prefix)
		out.String(string(in.Display))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ref) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ref) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp4(l, v)
}
func easyjson65fe1869DecodeTmp5(in *jlexer.Lexer, out *Period) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp5(out *jwriter.Writer, in Period) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix[1:])
		out.String(string(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		out.String(string(in.End))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Period) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Period) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp5(l, v)
}
func easyjson65fe1869DecodeTmp6(in *jlexer.Lexer, out *Patient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resourceType":
			out.ResourceType = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "text":
			(out.Text).UnmarshalEasyJSON(in)
		case "identifier":
			if in.IsNull() {
				in.Skip()
				out.Identifier = nil
			} else {
				in.Delim('[')
				if out.Identifier == nil {
					if !in.IsDelim(']') {
						out.Identifier = make([]*Identifier, 0, 8)
					} else {
						out.Identifier = []*Identifier{}
					}
				} else {
					out.Identifier = (out.Identifier)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Identifier
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Identifier)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Identifier = append(out.Identifier, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "active":
			out.Active = bool(in.Bool())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				in.Delim('[')
				if out.Name == nil {
					if !in.IsDelim(']') {
						out.Name = make([]*Name, 0, 8)
					} else {
						out.Name = []*Name{}
					}
				} else {
					out.Name = (out.Name)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Name
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Name)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Name = append(out.Name, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "telecom":
			if in.IsNull() {
				in.Skip()
				out.Telecom = nil
			} else {
				in.Delim('[')
				if out.Telecom == nil {
					if !in.IsDelim(']') {
						out.Telecom = make([]*Telecom, 0, 8)
					} else {
						out.Telecom = []*Telecom{}
					}
				} else {
					out.Telecom = (out.Telecom)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *Telecom
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(Telecom)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.Telecom = append(out.Telecom, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gender":
			out.Gender = string(in.String())
		case "birthDate":
			out.BirthDate = string(in.String())
		case "_birthDate":
			(out.XBirthDate).UnmarshalEasyJSON(in)
		case "deceasedBoolean":
			out.DeceasedBoolean = bool(in.Bool())
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				in.Delim('[')
				if out.Address == nil {
					if !in.IsDelim(']') {
						out.Address = make([]*Address, 0, 8)
					} else {
						out.Address = []*Address{}
					}
				} else {
					out.Address = (out.Address)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Address
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Address)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Address = append(out.Address, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "contact":
			if in.IsNull() {
				in.Skip()
				out.Contact = nil
			} else {
				in.Delim('[')
				if out.Contact == nil {
					if !in.IsDelim(']') {
						out.Contact = make([]*Contact, 0, 8)
					} else {
						out.Contact = []*Contact{}
					}
				} else {
					out.Contact = (out.Contact)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Contact
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Contact)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Contact = append(out.Contact, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "communication":
			if in.IsNull() {
				in.Skip()
				out.Communication = nil
			} else {
				in.Delim('[')
				if out.Communication == nil {
					if !in.IsDelim(']') {
						out.Communication = make([]*Communication, 0, 8)
					} else {
						out.Communication = []*Communication{}
					}
				} else {
					out.Communication = (out.Communication)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *Communication
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(Communication)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					out.Communication = append(out.Communication, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "managingOrganization":
			(out.ManagingOrganization).UnmarshalEasyJSON(in)
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp6(out *jwriter.Writer, in Patient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resourceType\":"
		out.RawString(prefix[1:])
		out.String(string(in.ResourceType))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		(in.Text).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		if in.Identifier == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Identifier {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Name {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"telecom\":"
		out.RawString(prefix)
		if in.Telecom == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Telecom {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"birthDate\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"_birthDate\":"
		out.RawString(prefix)
		(in.XBirthDate).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"deceasedBoolean\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeceasedBoolean))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		if in.Address == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Address {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"contact\":"
		out.RawString(prefix)
		if in.Contact == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Contact {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"communication\":"
		out.RawString(prefix)
		if in.Communication == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Communication {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"managingOrganization\":"
		out.RawString(prefix)
		(in.ManagingOrganization).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Patient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Patient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp6(l, v)
}
func easyjson65fe1869DecodeTmp7(in *jlexer.Lexer, out *PartialPatient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			if in.IsNull() {
				in.Skip()
				out.Identifier = nil
			} else {
				in.Delim('[')
				if out.Identifier == nil {
					if !in.IsDelim(']') {
						out.Identifier = make([]struct {
							Type struct {
								Coding []struct {
									Code string `json:"code"`
								} `json:"coding"`
							} `json:"type"`
						}, 0, 2)
					} else {
						out.Identifier = []struct {
							Type struct {
								Coding []struct {
									Code string `json:"code"`
								} `json:"coding"`
							} `json:"type"`
						}{}
					}
				} else {
					out.Identifier = (out.Identifier)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						Type struct {
							Coding []struct {
								Code string `json:"code"`
							} `json:"coding"`
						} `json:"type"`
					}
					easyjson65fe1869Decode(in, &v22)
					out.Identifier = append(out.Identifier, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				in.Delim('[')
				if out.Name == nil {
					if !in.IsDelim(']') {
						out.Name = make([]struct {
							Given []string `json:"given"`
						}, 0, 2)
					} else {
						out.Name = []struct {
							Given []string `json:"given"`
						}{}
					}
				} else {
					out.Name = (out.Name)[:0]
				}
				for !in.IsDelim(']') {
					var v23 struct {
						Given []string `json:"given"`
					}
					easyjson65fe1869Decode1(in, &v23)
					out.Name = append(out.Name, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deceasedBoolean":
			out.DeceasedBoolean = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp7(out *jwriter.Writer, in PartialPatient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		if in.Identifier == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Identifier {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjson65fe1869Encode(out, v25)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Name {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson65fe1869Encode1(out, v27)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"deceasedBoolean\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeceasedBoolean))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartialPatient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartialPatient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp7(l, v)
}
func easyjson65fe1869Decode1(in *jlexer.Lexer, out *struct {
	Given []string `json:"given"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "given":
			if in.IsNull() {
				in.Skip()
				out.Given = nil
			} else {
				in.Delim('[')
				if out.Given == nil {
					if !in.IsDelim(']') {
						out.Given = make([]string, 0, 4)
					} else {
						out.Given = []string{}
					}
				} else {
					out.Given = (out.Given)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Given = append(out.Given, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869Encode1(out *jwriter.Writer, in struct {
	Given []string `json:"given"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"given\":"
		out.RawString(prefix[1:])
		if in.Given == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Given {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson65fe1869Decode(in *jlexer.Lexer, out *struct {
	Type struct {
		Coding []struct {
			Code string `json:"code"`
		} `json:"coding"`
	} `json:"type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson65fe1869Decode2(in, &out.Type)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869Encode(out *jwriter.Writer, in struct {
	Type struct {
		Coding []struct {
			Code string `json:"code"`
		} `json:"coding"`
	} `json:"type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		easyjson65fe1869Encode2(out, in.Type)
	}
	out.RawByte('}')
}
func easyjson65fe1869Decode2(in *jlexer.Lexer, out *struct {
	Coding []struct {
		Code string `json:"code"`
	} `json:"coding"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coding":
			if in.IsNull() {
				in.Skip()
				out.Coding = nil
			} else {
				in.Delim('[')
				if out.Coding == nil {
					if !in.IsDelim(']') {
						out.Coding = make([]struct {
							Code string `json:"code"`
						}, 0, 4)
					} else {
						out.Coding = []struct {
							Code string `json:"code"`
						}{}
					}
				} else {
					out.Coding = (out.Coding)[:0]
				}
				for !in.IsDelim(']') {
					var v31 struct {
						Code string `json:"code"`
					}
					easyjson65fe1869Decode3(in, &v31)
					out.Coding = append(out.Coding, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869Encode2(out *jwriter.Writer, in struct {
	Coding []struct {
		Code string `json:"code"`
	} `json:"coding"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coding\":"
		out.RawString(prefix[1:])
		if in.Coding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Coding {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjson65fe1869Encode3(out, v33)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson65fe1869Decode3(in *jlexer.Lexer, out *struct {
	Code string `json:"code"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869Encode3(out *jwriter.Writer, in struct {
	Code string `json:"code"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	out.RawByte('}')
}
func easyjson65fe1869DecodeTmp8(in *jlexer.Lexer, out *PartialLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "what":
			out.What = string(in.String())
		case "where":
			if in.IsNull() {
				in.Skip()
				out.Where = nil
			} else {
				in.Delim('[')
				if out.Where == nil {
					if !in.IsDelim(']') {
						out.Where = make([]struct {
							Line int `json:"line"`
						}, 0, 8)
					} else {
						out.Where = []struct {
							Line int `json:"line"`
						}{}
					}
				} else {
					out.Where = (out.Where)[:0]
				}
				for !in.IsDelim(']') {
					var v34 struct {
						Line int `json:"line"`
					}
					easyjson65fe1869Decode4(in, &v34)
					out.Where = append(out.Where, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp8(out *jwriter.Writer, in PartialLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix[1:])
		out.String(string(in.What))
	}
	{
		const prefix string = ",\"where\":"
		out.RawString(prefix)
		if in.Where == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Where {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson65fe1869Encode4(out, v36)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartialLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartialLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp8(l, v)
}
func easyjson65fe1869Decode4(in *jlexer.Lexer, out *struct {
	Line int `json:"line"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "line":
			out.Line = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869Encode4(out *jwriter.Writer, in struct {
	Line int `json:"line"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Line))
	}
	out.RawByte('}')
}
func easyjson65fe1869DecodeTmp9(in *jlexer.Lexer, out *Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "given":
			if in.IsNull() {
				in.Skip()
				out.Given = nil
			} else {
				in.Delim('[')
				if out.Given == nil {
					if !in.IsDelim(']') {
						out.Given = make([]string, 0, 4)
					} else {
						out.Given = []string{}
					}
				} else {
					out.Given = (out.Given)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.Given = append(out.Given, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "family":
			out.Family = string(in.String())
		case "_family":
			(out.XFamily).UnmarshalEasyJSON(in)
		case "use":
			out.Use = string(in.String())
		case "period":
			(out.Period).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp9(out *jwriter.Writer, in Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"given\":"
		out.RawString(prefix[1:])
		if in.Given == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Given {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"family\":"
		out.RawString(prefix)
		out.String(string(in.Family))
	}
	{
		const prefix string = ",\"_family\":"
		out.RawString(prefix)
		(in.XFamily).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"use\":"
		out.RawString(prefix)
		out.String(string(in.Use))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		(in.Period).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Name) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Name) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp9(l, v)
}
func easyjson65fe1869DecodeTmp10(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag":
			if in.IsNull() {
				in.Skip()
				out.Tag = nil
			} else {
				in.Delim('[')
				if out.Tag == nil {
					if !in.IsDelim(']') {
						out.Tag = make([]*Tag, 0, 8)
					} else {
						out.Tag = []*Tag{}
					}
				} else {
					out.Tag = (out.Tag)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *Tag
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(Tag)
						}
						(*v40).UnmarshalEasyJSON(in)
					}
					out.Tag = append(out.Tag, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp10(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix[1:])
		if in.Tag == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Tag {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					(*v42).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp10(l, v)
}
func easyjson65fe1869DecodeTmp11(in *jlexer.Lexer, out *Identifier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "use":
			out.Use = string(in.String())
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		case "system":
			out.System = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "period":
			(out.Period).UnmarshalEasyJSON(in)
		case "assigner":
			(out.Assigner).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp11(out *jwriter.Writer, in Identifier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"use\":"
		out.RawString(prefix[1:])
		out.String(string(in.Use))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		(in.Period).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"assigner\":"
		out.RawString(prefix)
		(in.Assigner).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identifier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identifier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp11(l, v)
}
func easyjson65fe1869DecodeTmp12(in *jlexer.Lexer, out *FullLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "what":
			out.What = string(in.String())
		case "Where":
			if in.IsNull() {
				in.Skip()
				out.Where = nil
			} else {
				in.Delim('[')
				if out.Where == nil {
					if !in.IsDelim(']') {
						out.Where = make([]struct {
							File string `json:"file"`
							Line int    `json:"line"`
						}, 0, 2)
					} else {
						out.Where = []struct {
							File string `json:"file"`
							Line int    `json:"line"`
						}{}
					}
				} else {
					out.Where = (out.Where)[:0]
				}
				for !in.IsDelim(']') {
					var v43 struct {
						File string `json:"file"`
						Line int    `json:"line"`
					}
					easyjson65fe1869Decode5(in, &v43)
					out.Where = append(out.Where, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "who":
			out.Who = string(in.String())
		case "level":
			out.Level = string(in.String())
		case "when":
			out.When = int64(in.Int64())
		case "patients":
			if in.IsNull() {
				in.Skip()
				out.Patients = nil
			} else {
				in.Delim('[')
				if out.Patients == nil {
					if !in.IsDelim(']') {
						out.Patients = make([]Patient, 0, 0)
					} else {
						out.Patients = []Patient{}
					}
				} else {
					out.Patients = (out.Patients)[:0]
				}
				for !in.IsDelim(']') {
					var v44 Patient
					(v44).UnmarshalEasyJSON(in)
					out.Patients = append(out.Patients, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp12(out *jwriter.Writer, in FullLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix[1:])
		out.String(string(in.What))
	}
	{
		const prefix string = ",\"Where\":"
		out.RawString(prefix)
		if in.Where == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Where {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjson65fe1869Encode5(out, v46)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"who\":"
		out.RawString(prefix)
		out.String(string(in.Who))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.String(string(in.Level))
	}
	{
		const prefix string = ",\"when\":"
		out.RawString(prefix)
		out.Int64(int64(in.When))
	}
	{
		const prefix string = ",\"patients\":"
		out.RawString(prefix)
		if in.Patients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Patients {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FullLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FullLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp12(l, v)
}
func easyjson65fe1869Decode5(in *jlexer.Lexer, out *struct {
	File string `json:"file"`
	Line int    `json:"line"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			out.File = string(in.String())
		case "line":
			out.Line = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869Encode5(out *jwriter.Writer, in struct {
	File string `json:"file"`
	Line int    `json:"line"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		out.String(string(in.File))
	}
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix)
		out.Int(int(in.Line))
	}
	out.RawByte('}')
}
func easyjson65fe1869DecodeTmp13(in *jlexer.Lexer, out *Extension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "valueDateTime":
			out.ValueDateTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp13(out *jwriter.Writer, in Extension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"valueDateTime\":"
		out.RawString(prefix)
		out.String(string(in.ValueDateTime))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Extension) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Extension) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp13(l, v)
}
func easyjson65fe1869DecodeTmp14(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "relationship":
			if in.IsNull() {
				in.Skip()
				out.Relationship = nil
			} else {
				in.Delim('[')
				if out.Relationship == nil {
					if !in.IsDelim(']') {
						out.Relationship = make([]*CC, 0, 8)
					} else {
						out.Relationship = []*CC{}
					}
				} else {
					out.Relationship = (out.Relationship)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *CC
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(CC)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.Relationship = append(out.Relationship, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			(out.Name).UnmarshalEasyJSON(in)
		case "telecom":
			if in.IsNull() {
				in.Skip()
				out.Telecom = nil
			} else {
				in.Delim('[')
				if out.Telecom == nil {
					if !in.IsDelim(']') {
						out.Telecom = make([]*Telecom, 0, 8)
					} else {
						out.Telecom = []*Telecom{}
					}
				} else {
					out.Telecom = (out.Telecom)[:0]
				}
				for !in.IsDelim(']') {
					var v50 *Telecom
					if in.IsNull() {
						in.Skip()
						v50 = nil
					} else {
						if v50 == nil {
							v50 = new(Telecom)
						}
						(*v50).UnmarshalEasyJSON(in)
					}
					out.Telecom = append(out.Telecom, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "gender":
			out.Gender = string(in.String())
		case "period":
			(out.Period).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp14(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"relationship\":"
		out.RawString(prefix[1:])
		if in.Relationship == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Relationship {
				if v51 > 0 {
					out.RawByte(',')
				}
				if v52 == nil {
					out.RawString("null")
				} else {
					(*v52).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		(in.Name).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"telecom\":"
		out.RawString(prefix)
		if in.Telecom == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Telecom {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil {
					out.RawString("null")
				} else {
					(*v54).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		(in.Period).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp14(l, v)
}
func easyjson65fe1869DecodeTmp15(in *jlexer.Lexer, out *Communication) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "language":
			(out.Language).UnmarshalEasyJSON(in)
		case "preferred":
			out.Preferred = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp15(out *jwriter.Writer, in Communication) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix[1:])
		(in.Language).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"preferred\":"
		out.RawString(prefix)
		out.Bool(bool(in.Preferred))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Communication) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Communication) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp15(l, v)
}
func easyjson65fe1869DecodeTmp16(in *jlexer.Lexer, out *CC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coding":
			if in.IsNull() {
				in.Skip()
				out.Coding = nil
			} else {
				in.Delim('[')
				if out.Coding == nil {
					if !in.IsDelim(']') {
						out.Coding = make([]*Tag, 0, 8)
					} else {
						out.Coding = []*Tag{}
					}
				} else {
					out.Coding = (out.Coding)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *Tag
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(Tag)
						}
						(*v55).UnmarshalEasyJSON(in)
					}
					out.Coding = append(out.Coding, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp16(out *jwriter.Writer, in CC) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coding\":"
		out.RawString(prefix[1:])
		if in.Coding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Coding {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					(*v57).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp16(l, v)
}
func easyjson65fe1869DecodeTmp17(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "use":
			out.Use = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "line":
			if in.IsNull() {
				in.Skip()
				out.Line = nil
			} else {
				in.Delim('[')
				if out.Line == nil {
					if !in.IsDelim(']') {
						out.Line = make([]string, 0, 4)
					} else {
						out.Line = []string{}
					}
				} else {
					out.Line = (out.Line)[:0]
				}
				for !in.IsDelim(']') {
					var v58 string
					v58 = string(in.String())
					out.Line = append(out.Line, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "city":
			out.City = string(in.String())
		case "district":
			out.District = string(in.String())
		case "state":
			out.State = string(in.String())
		case "postalCode":
			out.PostalCode = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "period":
			(out.Period).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65fe1869EncodeTmp17(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"use\":"
		out.RawString(prefix[1:])
		out.String(string(in.Use))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix)
		if in.Line == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Line {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"district\":"
		out.RawString(prefix)
		out.String(string(in.District))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"postalCode\":"
		out.RawString(prefix)
		out.String(string(in.PostalCode))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		(in.Period).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65fe1869EncodeTmp17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65fe1869DecodeTmp17(l, v)
}
